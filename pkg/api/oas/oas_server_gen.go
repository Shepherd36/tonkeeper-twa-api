// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetTonConnectPayload implements getTonConnectPayload operation.
	//
	// Get a challenge for TON Connect.
	//
	// GET /tonconnect/payload
	GetTonConnectPayload(ctx context.Context) (*GetTonConnectPayloadOK, error)
	// SubscribeToAccountEvents implements subscribeToAccountEvents operation.
	//
	// Subscribe to notifications about events in the TON blockchain for the specified address.
	//
	// POST /tonconnect/subscribe
	SubscribeToAccountEvents(ctx context.Context, req *SubscribeToAccountEventsReq) error
	// UnsubscribeFromAccountEvents implements unsubscribeFromAccountEvents operation.
	//
	// Unsubscribe from notifications about events in the TON blockchain for the specified address.
	//
	// POST /tonconnect/unsubscribe
	UnsubscribeFromAccountEvents(ctx context.Context, req *UnsubscribeFromAccountEventsReq) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
